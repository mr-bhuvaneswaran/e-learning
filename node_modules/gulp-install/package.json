{
  "_from": "gulp-install",
  "_id": "gulp-install@1.1.0",
  "_inBundle": false,
  "_integrity": "sha1-k4a0bLRmm0cle2rfTj6i6DySiho=",
  "_location": "/gulp-install",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gulp-install",
    "fetchSpec": "latest",
    "name": "gulp-install",
    "raw": "gulp-install",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-install/-/gulp-install-1.1.0.tgz",
  "_shasum": "9386b46cb4669b47257b6adf4e3ea2e83c928a1a",
  "_spec": "gulp-install",
  "_where": "/home/bhuvanes/Desktop/mini/CMS",
  "author": {
    "email": "joakim@klei.se",
    "name": "Joakim Carlstein"
  },
  "bugs": {
    "url": "https://github.com/slushjs/gulp-install/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "dargs": "^5.1.0",
    "gulp-util": "^3.0.7",
    "lodash.groupby": "^4.6.0",
    "p-queue": "^1.0.0",
    "through2": "^2.0.3",
    "which": "^1.2.14"
  },
  "deprecated": false,
  "description": "Automatically install npm, bower, tsd, and pip packages/dependencies if the relative configurations are found in the gulp file stream respectively",
  "devDependencies": {
    "chai": "^3.2.0",
    "mocha": "^3.2.0",
    "standard-version": "^4.0.0",
    "xo": "^0.18.0"
  },
  "homepage": "https://github.com/slushjs/gulp-install",
  "keywords": [
    "bower",
    "gulpplugin",
    "install",
    "npm"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gulp-install",
  "optionalDependencies": {},
  "readme": "# gulp-install [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n> Automatically install npm, bower, tsd, typings, composer and pip packages/dependencies if the relative configurations are found in the gulp file stream respectively\n\n<!-- MDTOC maxdepth:6 firsth1:2 numbering:0 flatten:0 bullets:1 updateOnSave:1 -->\n\n- [Primary objective](#primary-objective)   \n- [Installation](#installation)   \n   - [For global use with slush](#for-global-use-with-slush)   \n   - [For local use with gulp](#for-local-use-with-gulp)   \n- [Usage](#usage)   \n   - [In your `slushfile.js`:](#in-your-slushfilejs)   \n   - [In your `gulpfile.js`:](#in-your-gulpfilejs)   \n- [API](#api)   \n   - [`inject([options] [, callback])`](#injectoptions-callback)   \n- [Options](#options)   \n   - [options.`<command>`](#optionscommand)   \n   - [options.commands](#optionscommands)   \n   - [options.production](#optionsproduction)   \n   - [options.ignoreScripts](#optionsignorescripts)   \n   - [options.noOptional](#optionsnooptional)   \n   - [options.allowRoot](#optionsallowroot)   \n   - [options.args](#optionsargs)   \n- [License](#license)   \n\n<!-- /MDTOC -->\n\n| File Found | Command run|  \n| --- | --- |  \n|`package.json` | `npm install`|  \n|`bower.json` | `bower install`|  \n|`tsd.json` | `tsd reinstall --save`|  \n|`typings.json` | `typings install`|  \n|`composer.json` | `composer install`|  \n|`requirements.txt` | `pip install -r requirements.txt`|  \n\nIt will run the command in the directory it finds the file, so if you have configs nested in a lower directory than your `slushfile.js`/`gulpfile.js`, this will still work.\n\n**NOTE** since `v1.0.0` gulp-install requires at least NodeJS v6.\n\n## Primary objective\n\nUsed as the install step when using [`slush`](https://www.npmjs.org/package/slush) as a Yeoman replacement.\n\n## Installation\n\n### For global use with slush\n\nInstall `gulp-install` as a dependency:\n\n```shell\nnpm install --save gulp-install\n```\n\n### For local use with gulp\n\nInstall `gulp-install` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-install\n```\n\n## Usage\n\n### In your `slushfile.js`:\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install());\n```\n\n### In your `gulpfile.js`:\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(['./bower.json', './package.json'])\n  .pipe(install());\n```\n\n## API\n\n### `inject([options] [, callback])`\n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | `Object` | Any [option](#options) |\n| callback | `Function` | Called when install is finished (not on failures) |\n\n## Options\n\nTo not trigger the install use `--skip-install` as CLI parameter when running `slush` or `gulp`.\n\n### options.`<command>`\n\n**Type:** `Array|String|Object`\n\n**Default:** `null`\n\n\nUse this option(s) to specify any arguments for any command, e.g:\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install({\n    npm: '--production', // Either a single argument as a string\n    bower: {allowRoot: true}, // Or arguments as an object (transformed using Dargs: https://www.npmjs.com/package/dargs)\n    pip: ['--target', '.'] // Or arguments as an array\n  }));\n```\n\n### options.commands\n\n**Type:** `Object`\n\n**Default:** `null`\n\n\nUse this option to add any command to be run for any file, e.g:\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install({\n    commands: {\n      'package.json': 'yarn'\n    },\n    yarn: ['--extra', '--args', '--here']\n  }));\n```\n\n### options.production\n\n**Type:** `Boolean`\n\n**Default:** `false`\n\n\nSet to `true` if `npm install` should be appended with the `--production` parameter when stream contains `package.json`.\n\n**Example:**\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install({production: true}));  \n```\n\n### options.ignoreScripts\n\n**Type:** `Boolean`\n\n**Default:** `false`\n\n\nSet to `true` if `npm install` should be appended with the `--ignore-scripts` parameter when stream contains `package.json`. Useful for skipping `postinstall` scripts with `npm`.\n\n**Example:**\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install({ignoreScripts: true}));\n```\n\n### options.noOptional\n\n**Type:** `Boolean`\n\n**Default:** `false`\n\nSet to `true` if `npm install` should be appended with the `--no-optional` parameter which will prevent optional dependencies from being installed.\n\n**Example:**\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install({noOptional: true}));\n```\n\n### options.allowRoot\n\n**Type:** `Boolean`\n\n**Default:** `false`\n\n\nSet to `true` if `bower install` should be appended with the `--allow-root` parameter when stream contains `bower.json`.\n\n**Example:**\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install({allowRoot: true}));  \n```\n\n### options.args\n\n**Type:** `Array or String`\n\n**Default:** `undefined`\n\n\nSpecify additional arguments that will be passed to the install command(s).\n\n**Example:**\n\n```javascript\nvar install = require(\"gulp-install\");\n\ngulp.src(__dirname + '/templates/**')\n  .pipe(gulp.dest('./'))\n  .pipe(install({\n      args: ['dev', '--no-shrinkwrap' ]} // npm install --dev --no-shrinkwrap\n    ));  \n```\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/gulp-install\n[npm-image]: https://badge.fury.io/js/gulp-install.png\n\n[travis-url]: http://travis-ci.org/slushjs/gulp-install\n[travis-image]: https://secure.travis-ci.org/slushjs/gulp-install.png?branch=master\n\n[depstat-url]: https://david-dm.org/slushjs/gulp-install\n[depstat-image]: https://david-dm.org/slushjs/gulp-install.png\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/slushjs/gulp-install.git"
  },
  "scripts": {
    "test": "NODE_ENV=test mocha -R spec"
  },
  "version": "1.1.0",
  "xo": {
    "space": true
  }
}
